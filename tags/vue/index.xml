<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on cc的后花园</title>
    <link>https://drcoooper.gitee.io/tags/vue/</link>
    <description>Recent content in vue on cc的后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Dec 2019 11:51:04 +0800</lastBuildDate>
    
	<atom:link href="https://drcoooper.gitee.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vue过滤器之样式绑定</title>
      <link>https://drcoooper.gitee.io/2019/12/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8B%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Fri, 13 Dec 2019 11:51:04 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/12/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8B%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</guid>
      <description>需求 &amp;emsp;业务有个很常用的场景是渲染一个结果列表页时，后端返回的状态码一般只能是数字
&amp;emsp;但我们在table中渲染的时候只渲染数字显然并不能很直观的反馈给使用者，所以结合tag的type属性绑定，就能配合过滤器来实现颜色标识和文本映射，体验明显更好~
vue代码 首先vue实例中定义过滤器~
export default { // -1失败 0未启动 1运行中 2运行完成 3记录不存在 filters: { statusFilter(status) { const statusMap = { &#39;-1&#39;: &#39;失败&#39;, &#39;0&#39;: &#39;未启动&#39;, &#39;1&#39;: &#39;运行中&#39;, &#39;2&#39;: &#39;运行完成&#39;, &#39;3&#39;: &#39;记录不存在&#39; } return statusMap[status] }, typeFilter(status) { const statusMap = { &#39;-1&#39;: &#39;danger&#39;, &#39;0&#39;: &#39;&#39;, &#39;1&#39;: &#39;success&#39;, &#39;2&#39;: &#39;info&#39;, &#39;3&#39;: &#39;warning&#39; } return statusMap[status] } }, }  模板代码 之后在模板里使用就好啦！
&amp;lt;el-table-column label=&amp;quot;状态&amp;quot; prop=&amp;quot;status&amp;quot; width=&amp;quot;100&amp;quot; &amp;gt; &amp;lt;template slot-scope=&amp;quot;scope&amp;quot;&amp;gt; &amp;lt;el-tag :type=&amp;quot;scope.</description>
    </item>
    
    <item>
      <title>vue-element-ui下拉框返回对象</title>
      <link>https://drcoooper.gitee.io/2019/12/vue-element-ui%E4%B8%8B%E6%8B%89%E6%A1%86%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 13 Dec 2019 11:25:45 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/12/vue-element-ui%E4%B8%8B%E6%8B%89%E6%A1%86%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</guid>
      <description>起因 &amp;emsp;原本并不需要考虑这种形式，但是无奈后端提供的接口数据并没有描述相关的配置项。
需求是在一个form中的select被选择后（具体数据是一个IP地址），以popover的形式显示包含这个IP地址的对象的全部信息。众所周知，select中的option备选项是一个数组，比如我在created()阶段收到的数组元素之一如下：
{ host_name: &amp;quot;第一台测试服务器&amp;quot;, host_type: 0, id: 1, location: &amp;quot;香港&amp;quot;, private_ip: &amp;quot;10.78.100.5&amp;quot;, public_ip: &amp;quot;100.100.100.100:9527&amp;quot; }  处理选择 &amp;emsp;那么很显然，在option标签中，使用v-for取出item就可以渲染出这些备选项，而select组件已经为我们绑定了表单数据，在之前定义的:value=&amp;ldquo;item.public_ip&amp;rdquo;就代表填充到表单里的值,是我要的IP地址。
&amp;emsp;但是数据预览的需求是，不仅要看到IP地址，还要看到host_name、host_type、id这些json数组对象中的其他信息，
&amp;emsp;可是并没有提供映射的配置信息，所以我···用到了： :value=&amp;ldquo;item&amp;rdquo; 可是这里要注意，此时的item是一个对象，那么在外层的select中，要添加这个属性 value-key=&amp;ldquo;public_ip&amp;rdquo; 值应该是item对象里的唯一值，不然你连编译都别想过~
&amp;emsp;那么现在点击了选项后，select会把数据绑定在我定义的中间变量里 selected_center_or_edge_hosts &amp;emsp;本来这个变量应该是直接在form表单变量中的数组就可以了，但是为了存下所有的item信息，并且提交表单的时候，
后端哥也懒得处理解析json中的IP地址&amp;mdash;总之就是让我多解析一步都不行···
&amp;emsp;于是就想了一个折中的这个变量，选中的所有值都给它给它给它！
&amp;emsp;所以我绑定了一个方法，当选择的值发生变化，就会执行里面的动作：
1、先给select绑定方法，传递事件： @change=&amp;ldquo;change_selected_center_or_edge_hosts($event)&amp;rdquo;
2、之后定义执行动作：
change_selected_center_or_edge_hosts(e) { this.form.center_or_edge_hosts = this.selected_center_or_edge_hosts.map(x =&amp;gt; { return x.public_ip }) // 生成数组 }  这里就很明显了，我把选中的item数组中的public_ip取出来，赋值给了form表单里的原本该传的数组。
处理预览 &amp;emsp;至于预览，在select外层包裹一个popover + table的组件就可以了，但是这样的话一定要记得在select上添加这个属性： slot=&amp;ldquo;reference&amp;rdquo; 不然你别想再看到你的select选择器了！
提交请求后的清空处理 &amp;emsp;当执行了onSubmit之后，正常只要将this.form置空就行了，但是由于有selected_center_or_edge_hosts的存在，
&amp;emsp;所以我们也要将它置空，而这个需求其实还会要求当一个form中的radio-group切换时，这个select的备选选项数组也要变，所以在切换radio的时候，它的change方法里，也要置空selected_center_or_edge_hosts，不然你休想提交正确的信息了！
vue代码 &amp;lt;el-form-item label=&amp;quot;填坑的文本标题&amp;quot; prop=&amp;quot;center_or_edge_hosts&amp;quot; &amp;gt; &amp;lt;el-popover placement=&amp;quot;top-start&amp;quot; trigger=&amp;quot;hover&amp;quot; width=&amp;quot;800&amp;quot; &amp;gt; &amp;lt;el-table :data=&amp;quot;selected_center_or_edge_hosts&amp;quot;&amp;gt; &amp;lt;el-table-column width=&amp;quot;50&amp;quot; property=&amp;quot;id&amp;quot; label=&amp;quot;id&amp;quot; /&amp;gt; .</description>
    </item>
    
  </channel>
</rss>