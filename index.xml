<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cc的后花园</title>
    <link>https://drcoooper.gitee.io/</link>
    <description>Recent content on cc的后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Dec 2019 10:33:30 +0800</lastBuildDate>
    
	<atom:link href="https://drcoooper.gitee.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>H5ai</title>
      <link>https://drcoooper.gitee.io/2019/12/h5ai/</link>
      <pubDate>Mon, 30 Dec 2019 10:33:30 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/12/h5ai/</guid>
      <description>h5ai安装和配置 h5ai官网
h5ai Github
环境要求  nginx或者Apache，我的环境是mac + nginx； php，mac用户直接brew install php即可； 目录结构如下
DOC_ROOT ├─ _h5ai ├─ your files └─ and folders   ### nginx配置文件 mac本机用brew安装nginx后，默认配置文件地址为：
/usr/local/etc/nginx/nginx.conf  修改默认配置：
#user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main &#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &#39; # &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39; # &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;; #access_log logs/access.</description>
    </item>
    
    <item>
      <title>Vue Vuesocketio</title>
      <link>https://drcoooper.gitee.io/2019/12/vue-vuesocketio/</link>
      <pubDate>Fri, 27 Dec 2019 14:39:15 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/12/vue-vuesocketio/</guid>
      <description>VueSocketio的前端实现与大坑 前端实现 首先，如果全局初始化socket实例的话，在main.js中声明即可。 以下是在具体vue组件中使用的情况：
import VueSocketio from &#39;vue-socket.io&#39; import Vue from &#39;vue&#39; Vue.use(new VueSocketio({ debug: true, // connection: &#39;ws://10.60.82.83/lptslog&#39;, connection: req_url_us_ws + &#39;/lptslog&#39;, options: { // path: &#39;/lptslog&#39;, autoConnect: false, transports: [&#39;websocket&#39;, &#39;xhr-polling&#39;, &#39;jsonp-polling&#39;] } }))  这个Vue-Socket.io官方文档并没有提到*transports*是干啥的,它给的例子是：
import Vue from &#39;vue&#39; import store from &#39;./store&#39; import App from &#39;./App.vue&#39; import VueSocketIO from &#39;vue-socket.io&#39; Vue.use(new VueSocketIO({ debug: true, connection: &#39;http://metinseylan.com:1992&#39;, vuex: { store, actionPrefix: &#39;SOCKET_&#39;, mutationPrefix: &#39;SOCKET_&#39; }, options: { path: &amp;quot;/my-app/&amp;quot; } //Optional options })) new Vue({ router, store, render: h =&amp;gt; h(App) }).</description>
    </item>
    
    <item>
      <title>vue过滤器之样式绑定</title>
      <link>https://drcoooper.gitee.io/2019/12/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8B%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Fri, 13 Dec 2019 11:51:04 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/12/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8B%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</guid>
      <description>需求 &amp;emsp;业务有个很常用的场景是渲染一个结果列表页时，后端返回的状态码一般只能是数字
&amp;emsp;但我们在table中渲染的时候只渲染数字显然并不能很直观的反馈给使用者，所以结合tag的type属性绑定，就能配合过滤器来实现颜色标识和文本映射，体验明显更好~
vue代码 首先vue实例中定义过滤器~
export default { // -1失败 0未启动 1运行中 2运行完成 3记录不存在 filters: { statusFilter(status) { const statusMap = { &#39;-1&#39;: &#39;失败&#39;, &#39;0&#39;: &#39;未启动&#39;, &#39;1&#39;: &#39;运行中&#39;, &#39;2&#39;: &#39;运行完成&#39;, &#39;3&#39;: &#39;记录不存在&#39; } return statusMap[status] }, typeFilter(status) { const statusMap = { &#39;-1&#39;: &#39;danger&#39;, &#39;0&#39;: &#39;&#39;, &#39;1&#39;: &#39;success&#39;, &#39;2&#39;: &#39;info&#39;, &#39;3&#39;: &#39;warning&#39; } return statusMap[status] } }, }  模板代码 之后在模板里使用就好啦！
&amp;lt;el-table-column label=&amp;quot;状态&amp;quot; prop=&amp;quot;status&amp;quot; width=&amp;quot;100&amp;quot; &amp;gt; &amp;lt;template slot-scope=&amp;quot;scope&amp;quot;&amp;gt; &amp;lt;el-tag :type=&amp;quot;scope.</description>
    </item>
    
    <item>
      <title>vue-element-ui下拉框返回对象</title>
      <link>https://drcoooper.gitee.io/2019/12/vue-element-ui%E4%B8%8B%E6%8B%89%E6%A1%86%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 13 Dec 2019 11:25:45 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/12/vue-element-ui%E4%B8%8B%E6%8B%89%E6%A1%86%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</guid>
      <description>起因 &amp;emsp;原本并不需要考虑这种形式，但是无奈后端提供的接口数据并没有描述相关的配置项。
需求是在一个form中的select被选择后（具体数据是一个IP地址），以popover的形式显示包含这个IP地址的对象的全部信息。众所周知，select中的option备选项是一个数组，比如我在created()阶段收到的数组元素之一如下：
{ host_name: &amp;quot;第一台测试服务器&amp;quot;, host_type: 0, id: 1, location: &amp;quot;香港&amp;quot;, private_ip: &amp;quot;10.78.100.5&amp;quot;, public_ip: &amp;quot;100.100.100.100:9527&amp;quot; }  处理选择 &amp;emsp;那么很显然，在option标签中，使用v-for取出item就可以渲染出这些备选项，而select组件已经为我们绑定了表单数据，在之前定义的:value=&amp;ldquo;item.public_ip&amp;rdquo;就代表填充到表单里的值,是我要的IP地址。
&amp;emsp;但是数据预览的需求是，不仅要看到IP地址，还要看到host_name、host_type、id这些json数组对象中的其他信息，
&amp;emsp;可是并没有提供映射的配置信息，所以我···用到了： :value=&amp;ldquo;item&amp;rdquo; 可是这里要注意，此时的item是一个对象，那么在外层的select中，要添加这个属性 value-key=&amp;ldquo;public_ip&amp;rdquo; 值应该是item对象里的唯一值，不然你连编译都别想过~
&amp;emsp;那么现在点击了选项后，select会把数据绑定在我定义的中间变量里 selected_center_or_edge_hosts &amp;emsp;本来这个变量应该是直接在form表单变量中的数组就可以了，但是为了存下所有的item信息，并且提交表单的时候，
后端哥也懒得处理解析json中的IP地址&amp;mdash;总之就是让我多解析一步都不行···
&amp;emsp;于是就想了一个折中的这个变量，选中的所有值都给它给它给它！
&amp;emsp;所以我绑定了一个方法，当选择的值发生变化，就会执行里面的动作：
1、先给select绑定方法，传递事件： @change=&amp;ldquo;change_selected_center_or_edge_hosts($event)&amp;rdquo;
2、之后定义执行动作：
change_selected_center_or_edge_hosts(e) { this.form.center_or_edge_hosts = this.selected_center_or_edge_hosts.map(x =&amp;gt; { return x.public_ip }) // 生成数组 }  这里就很明显了，我把选中的item数组中的public_ip取出来，赋值给了form表单里的原本该传的数组。
处理预览 &amp;emsp;至于预览，在select外层包裹一个popover + table的组件就可以了，但是这样的话一定要记得在select上添加这个属性： slot=&amp;ldquo;reference&amp;rdquo; 不然你别想再看到你的select选择器了！
提交请求后的清空处理 &amp;emsp;当执行了onSubmit之后，正常只要将this.form置空就行了，但是由于有selected_center_or_edge_hosts的存在，
&amp;emsp;所以我们也要将它置空，而这个需求其实还会要求当一个form中的radio-group切换时，这个select的备选选项数组也要变，所以在切换radio的时候，它的change方法里，也要置空selected_center_or_edge_hosts，不然你休想提交正确的信息了！
vue代码 &amp;lt;el-form-item label=&amp;quot;填坑的文本标题&amp;quot; prop=&amp;quot;center_or_edge_hosts&amp;quot; &amp;gt; &amp;lt;el-popover placement=&amp;quot;top-start&amp;quot; trigger=&amp;quot;hover&amp;quot; width=&amp;quot;800&amp;quot; &amp;gt; &amp;lt;el-table :data=&amp;quot;selected_center_or_edge_hosts&amp;quot;&amp;gt; &amp;lt;el-table-column width=&amp;quot;50&amp;quot; property=&amp;quot;id&amp;quot; label=&amp;quot;id&amp;quot; /&amp;gt; .</description>
    </item>
    
    <item>
      <title>Flutter</title>
      <link>https://drcoooper.gitee.io/2019/10/flutter/</link>
      <pubDate>Mon, 28 Oct 2019 10:30:55 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/10/flutter/</guid>
      <description>起步：安装 安装</description>
    </item>
    
    <item>
      <title>Adb</title>
      <link>https://drcoooper.gitee.io/2019/10/adb/</link>
      <pubDate>Mon, 28 Oct 2019 10:18:05 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/10/adb/</guid>
      <description>ADB命令（Android Debug Bridge） 显示系统中全部设备 adb devices 这个命令是查看当前连接的设备, 连接到计算机的android设备或者模拟器将会列出显示  安装一个apk adb install -r (APK路径) -r 代表如果apk已安装，重新安装apk并保留数据和缓存文件。apk路径则可以直接将apk文件拖进cmd窗口，记得加空格  直接卸载 adb uninstall (apk包名) 卸载 app 但保留数据和缓存文件  清除应用数据与缓存 adb shell pm clear （apk包名）  强制停止应用 adb shell am force-stop （apk包名）  重启设备 adb reboot  删除文件 adb shell cd sdcard/model/book ls rm -r 415  pull和push文件 adb push (文件路径) (想要push的路径) adb pull (文件路径) (想要pull的路径)  查看日志 adb logcat -v threadtime  过滤日志 adb logcat -v threadtime | grep (关键字)  投屏(用于电脑控制设备) 打开vysor adb shell am start -n com.</description>
    </item>
    
    <item>
      <title>Jmeter</title>
      <link>https://drcoooper.gitee.io/2019/10/jmeter/</link>
      <pubDate>Mon, 28 Oct 2019 10:17:05 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/10/jmeter/</guid>
      <description>下载jmeter最新版  https://jmeter.apache.org/download_jmeter.cgi
 修改配置文件 vim apache-jmeter-5.1.1/bin/jmeter.properties   找到server.rmi.ssl.disable 这行，去掉前的#，并且把它的值由默认的False改为true
找到remote_hosts 这行，去掉前面的#，并且把它的值由默认的127.0.0.1改为10.0.11.200:1099(这是负载机的内网IP)
 以下为jmeter5.1的例子  257 # Remote Hosts - comma delimited 258 remote_hosts=10.0.11.200:1099 259 #remote_hosts=localhost:1099,localhost:2010 260 261 # RMI port to be used by the server (must start rmiregistry with same port) 262 #server_port=1099 263 264 # To change the port to (say) 1234: 265 # On the server(s) 266 set server_port=1234 267 start rmiregistry with port 1234  Q &amp;amp; A 自己机器上看不到响应信息怎么办？ 修改配置如下：</description>
    </item>
    
    <item>
      <title>Jenkins</title>
      <link>https://drcoooper.gitee.io/2019/10/jenkins/</link>
      <pubDate>Mon, 28 Oct 2019 10:13:54 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/10/jenkins/</guid>
      <description>重要命令 解决报告样式问题执行： System.setProperty(&amp;ldquo;hudson.model.DirectoryBrowserSupport.CSP&amp;rdquo;, &amp;ldquo;&amp;rdquo;) println(Jenkins.instance.pluginManager.plugins)
mvn向jmeter传递参数的实际命令： pom文件中要添加：
&amp;lt;!--设置报告生成的路径--&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;jmeter.result.jtl.dir&amp;gt;${project.build.directory}\jmeter\results&amp;lt;/jmeter.result.jtl.dir&amp;gt; &amp;lt;jmeter.result.html.dir&amp;gt;${project.build.directory}\jmeter\html&amp;lt;/jmeter.result.html.dir&amp;gt; &amp;lt;performancetest.threadCount&amp;gt;1&amp;lt;/performancetest.threadCount&amp;gt; &amp;lt;performancetest.loopCount&amp;gt;1&amp;lt;/performancetest.loopCount&amp;gt; &amp;lt;performancetest.key&amp;gt;1&amp;lt;/performancetest.key&amp;gt; &amp;lt;/properties&amp;gt;  &amp;lt;!--执行配置文件--&amp;gt; &amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;jenkins&amp;lt;/id&amp;gt; &amp;lt;!--&amp;lt;properties&amp;gt;--&amp;gt; &amp;lt;!--&amp;lt;performancetest.threadCount&amp;gt;1&amp;lt;/performancetest.threadCount&amp;gt;--&amp;gt; &amp;lt;!--&amp;lt;performancetest.loopCount&amp;gt;1&amp;lt;/performancetest.loopCount&amp;gt;--&amp;gt; &amp;lt;!--&amp;lt;performancetest.key&amp;gt;1&amp;lt;/performancetest.key&amp;gt;--&amp;gt; &amp;lt;!--&amp;lt;/properties&amp;gt;--&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;/profiles&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.lazerycode.jmeter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jmeter-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.5.0&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!-- 设置jmeter生成结果文件格式--&amp;gt; &amp;lt;resultsFileFormat&amp;gt;xml&amp;lt;/resultsFileFormat&amp;gt; &amp;lt;!-- 设置忽略失败是否停止运行--&amp;gt; &amp;lt;ignoreResultFailures&amp;gt;true&amp;lt;/ignoreResultFailures&amp;gt; &amp;lt;!--设置结果是否有时间戳--&amp;gt; &amp;lt;testResultsTimestamp&amp;gt;true&amp;lt;/testResultsTimestamp&amp;gt; &amp;lt;testFilesIncluded&amp;gt; &amp;lt;!-- //指定运行的jmeter脚本 --&amp;gt; &amp;lt;jMeterTestFile&amp;gt;*.jmx&amp;lt;/jMeterTestFile&amp;gt; &amp;lt;/testFilesIncluded&amp;gt; &amp;lt;!-- 指定jtl生成目录 --&amp;gt; &amp;lt;resultsDirectory&amp;gt;${jmeter.result.jtl.dir}&amp;lt;/resultsDirectory&amp;gt; &amp;lt;propertiesUser&amp;gt; &amp;lt;threadCount&amp;gt;${performancetest.threadCount}&amp;lt;/threadCount&amp;gt; &amp;lt;loopCount&amp;gt;${performancetest.loopCount}&amp;lt;/loopCount&amp;gt; &amp;lt;key&amp;gt;${performancetest.key}&amp;lt;/key&amp;gt; &amp;lt;/propertiesUser&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;jmeter-tests&amp;lt;/id&amp;gt; &amp;lt;!--脚本所在的文件夹 --&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;jmeter&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Odin</title>
      <link>https://drcoooper.gitee.io/2019/10/odin/</link>
      <pubDate>Mon, 28 Oct 2019 10:11:51 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/10/odin/</guid>
      <description> 起源 Odin平台起源于cm测试团队的不开源行为 三人分工为1前端，2后端在原来基础上进行了升级。 本项目基于vue-element-admin二次开发，先后破解了登录权限、侧边栏、axios请求拦截等操作。 </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://drcoooper.gitee.io/about/</link>
      <pubDate>Mon, 28 Oct 2019 10:06:30 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/about/</guid>
      <description> 前端 HTML,CSS,VUE,WebSocket,Kotlin
后端 Python,Golang
以上都不太熟 </description>
    </item>
    
    <item>
      <title>Govendor</title>
      <link>https://drcoooper.gitee.io/2019/10/govendor/</link>
      <pubDate>Mon, 28 Oct 2019 09:56:42 +0800</pubDate>
      
      <guid>https://drcoooper.gitee.io/2019/10/govendor/</guid>
      <description>安装govendor go get -u -v github.com/kardianos/govendor
运行 govendor 检测安装结果
govendor
初始化 govendor init
收集依赖包 go add +external
安装部署govendor项目 进入git clone完成后的项目目录下
govendor sync
不过貌似也不需要，只要vendor目录在项目目录下即可</description>
    </item>
    
  </channel>
</rss>